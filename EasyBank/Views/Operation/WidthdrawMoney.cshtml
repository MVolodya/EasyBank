@model EasyBank.Models.Account

<script src="~/Scripts/jquery-1.8.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<script type="text/javascript">
    $.validator.methods.number = function(value, element) {
        return !isNaN(parseFloat(value));
    };
    $.validator.methods.range = function(value, element, param) {
        var globalizedValue = value.replace(",", ".");
        return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
    };
    $(document).ready(function () {
        $(document).on('submit', '#submitForm', function () {
            $("#Amount").val($("#Amount").val().replace(',', '.'));
            alert();
        });
    });
</script>

<fieldset>
    <legend>Account</legend>

    <div class="display-label">
        @Html.DisplayNameFor(model => model.AccountNumber)
    </div>
    <div class="display-field">
        @Html.DisplayFor(model => model.AccountNumber)
    </div>

    <div class="display-label">
        @Html.DisplayNameFor(model => model.ExpirationDate)
    </div>
    <div class="display-field">
        @Html.DisplayFor(model => model.ExpirationDate)
    </div>

    <div class="display-label">
        @Html.DisplayNameFor(model => model.Amount)
    </div>
    <div class="display-field">
        @Html.DisplayFor(model => model.Amount)
    </div>

    <div class="display-label">
        @Html.DisplayNameFor(model => model.AvailableAmount)
    </div>
    <div class="display-field">
        @Html.DisplayFor(model => model.AvailableAmount)
    </div>

    <div class="display-label">
        @Html.DisplayNameFor(model => model.ClientId)
    </div>
    <div class="display-field">
        @Html.DisplayFor(model => model.Client.Name)
    </div>

    <div class="display-label">
        @Html.DisplayNameFor(model => model.TypeId)
    </div>
    <div class="display-field">
        @Html.DisplayFor(model => model.AccountType.TypeName)
    </div>

    <div class="display-label">
        @Html.DisplayNameFor(model => model.CurrencyId)
    </div>
    <div class="display-field">
        @Html.DisplayFor(model => model.Currency.CurrencyName)
    </div>

    <div class="display-label">
        @Html.DisplayNameFor(model => model.StatusId)
    </div>
    <div class="display-field">
        @Html.DisplayFor(model => model.AccountStatus.StatusName)
    </div>
    @if (Model.AccountType.TypeId != 1)
    {
        <div class="display-label">
        @Html.DisplayNameFor(model => model.DepositCreditModel.EarlyTermination)
    </div>
    <div class="display-field">
        @Html.DisplayFor(model => model.DepositCreditModel.EarlyTermination)
    </div>
    }
</fieldset>

<h4><b>@Resources.Resource.WithdrawFunds</b></h4>
@if (Model.AccountType.TypeName != "Credit")
{
    using (Html.BeginForm("WidthdrawMoney", "Operation", FormMethod.Post, new { @Id = "submitForm" }))
    {
    @Html.HiddenFor(model => model.ClientId)
    @Html.HiddenFor(model => model.AccountId)
    @Html.EditorFor(model => model.Amount)
    @Html.ValidationMessageFor(model => model.Amount)

    
    List<SelectListItem> itemList = ViewBag.itemList;
    
    @Html.DropDownList("CurrencyName", itemList)

    <br />
    <input type="submit" value=@Resources.Resource.Submit onclick="return confirm(@Resources.Resource.AskToAddMoney) ? true : false;"/>
    }
}
else
{
    <h6>@Resources.Resource.ErrorTakeMoneyFromCreditAcc</h6>
}

<p>
    @Html.ActionLink(@Resources.Resource.BackToProfile, "ClientsProfile", "Protected", new { clientId = Model.ClientId }, null)
</p>
