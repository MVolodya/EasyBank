@model EasyBank.Models.Account

<script src="~/Scripts/jquery-1.8.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

@using (Html.BeginForm("AddAccount", "Protected", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)


    <fieldset>
        <legend>Account</legend>
        @Html.HiddenFor(model => model.ClientId, new { @Value = ViewBag.ClientId })
        <div class="editor-label">
            @Html.LabelFor(model => model.AccountNumber)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.AccountNumber)
            @Html.ValidationMessageFor(model => model.AccountNumber)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.ExpirationDate)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.ExpirationDate)
            @Html.ValidationMessageFor(model => model.ExpirationDate)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Amount)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Amount)
            @Html.ValidationMessageFor(model => model.Amount)
        </div>

        <p>@Resources.Resource.Type</p>

        @{
            List<SelectListItem> listType = new List<SelectListItem>();
            var ListTypes = ViewBag.Types;
            foreach (var item in ListTypes)
            {
                listType.Add(new SelectListItem() { Text = item.TypeName, Value = item.TypeId.ToString() });
            }
        }
        @Html.DropDownListFor(model => model.TypeId, listType)

        <p>@Resources.Resource.Currency</p>

        @{
            List<SelectListItem> listCurrency = new List<SelectListItem>();
            var ListCurrencys = ViewBag.Currencys;
            foreach (var item in ListCurrencys)
            {
                listCurrency.Add(new SelectListItem() { Text = item.CurrencyName, Value = item.CurrencyId.ToString() });
            }
        }
        @Html.DropDownListFor(model => model.CurrencyId, listCurrency)


        <p>
            <input type="submit" value="Create" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink(@Resources.Resource.BackToList, "Index")
</div>
